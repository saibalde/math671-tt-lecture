function [ttk, INDS] = tt_ker(ker, relAcc, d, type)
%TT_KER Construct TT approximation to kernel using TT
%
%   [ttk, inds] = tt_ker(fun, relAcc, d, type) computes the TT
%   approximation of the matrix generated by evauating function handle fun
%   at centers of the cells generated by dividing the square [0, 1]^2 into
%   2^d x 2^d equal segments. The TT decomposition ttk is then obtained by
%   running
%
%       *   TT-SVD if type is 'svd'
%       *   TT-AMEn-cross if type is 'amen-cross'
%
%   with relative accuracy relAcc on the tensorized function value vector.
%   inds records where the kernel was evaluated.

    h = 1 / 2^d;
    x = (0.5 * h : h : 1.0)';
    
    if strcmp(type, 'svd')
        kervals = ker(x, x');
        kervals = reshape(kervals, 2 * ones(1, 2 * d));
        dimorder = zeros(1, 2 * d);
        dimorder(1 : 2 : 2 * d) = 1 : d;
        dimorder(2 : 2 : 2 * d) = d + 1 : 2 * d;
        kervals = permute(kervals, dimorder);
        kervals = reshape(kervals, 4 * ones(1, d));

        ttk = tt_tensor(kervals, relAcc);
        ttk = tt_matrix(ttk, 2 * ones(1, d), 2 * ones(1, d));
        
        INDS = ones(2^d, 2^d);
    elseif strcmp(type, 'amen-cross')
        kickRank = 4;
        maxRank  = 400;
        numSweep = ceil(maxRank / kickRank);

        INDS = sparse(2^d, 2^d);
        
        ttk = amen_cross(4 * ones(1, d), @ker_eval, relAcc, ...
                         'nswp', numSweep, 'kickrank', kickRank, ...
                         'tol_exit',relAcc);
        ttk = round(ttk, 1.0e-15);
        ttk = tt_matrix(ttk, 2 * ones(1, d), 2 * ones(1, d));
    else
        error('type must be either svd or amen-cross');
    end

    function vals = ker_eval(inds)
        n = size(inds, 1);
        vals = zeros(n);

        for k = 1 : n
            i = 1;
            j = 1;
            for l = 1 : d
                ii = mod(inds(k, l) - 1, 2) + 1;
                jj = floor((inds(k, l) - 1) / 2) + 1;

                i = i + 2^(l - 1) * (ii - 1);
                j = j + 2^(l - 1) * (jj - 1);
            end

            INDS(i, j) = 1;
            vals(k) = ker(x(i), x(j));
        end
    end
end